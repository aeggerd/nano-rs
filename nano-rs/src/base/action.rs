// Actions

#[derive(PartialEq)]
pub enum Action {
    AccountBalance,
    AccountBlockCount,
    AccountGet,
    AccountHistory,
    AccountInfo,
    AccountKey,
    AccountRepresentative,
    AccountWeight,
    AccountsBalances,
    AccountsFrontiers,
    AccountsPending,
    ActiveDifficulty,
    AvailableSupply,
    BlockAccount,
    BlockConfirm,
    BlockCount,
    BlockCreate,
    BlockHash,
    BlockInfo,
    Blocks,
    BlocksInfo,
    Bootstrap,
    BootstrapAny,
    BootstrapLazy,
    BootstrapStatus,
    Chain,
    ConfirmationActive,
    ConfirmationHeightCurrentlyProcessing,
    ConfirmationHistory,
    ConfirmationInfo,
    ConfirmationQuorum,
    DatabaseTxnTracker,
    Delegators,
    DelegatorsCount,
    DeterministicKey,
    EpochUpgrade,
    FrontierCount,
    Frontiers,
    Kkeepalive,
    KeyCreate,
    KeyExpand,
    Ledger,
    NodeId,
    NodeIdDelete,
    Peers,
    Pending,
    PendingExists,
    Process,
    Representatives,
    RepresentativesOnline,
    Republish,
    Sign,
    Stats,
    StatsClear,
    Stop,
    Successors,
    Telemetry,
    ValidateAccountNumber,
    Version,
    Unchecked,
    UncheckedClear,
    UncheckedGet,
    UncheckedKeys,
    Unopened,
    Uptime,
    WorkCancel,
    WorkGenerate,
    WorkPeerAdd,
    WorkPeers,
    WorkPeersClear,
    WorkValidate,
    NoAction,
}


// impl From<AccountBalance> for String {
//    fn from() -> String {
//
//    }
// }


impl From<String> for Action {
    fn from(action: String) -> Self {
        let s: &str = &action;  // take a full slice of the string
        match s {
            "account_balance" => Self::AccountBalance,
            "account_block_count" => Self::AccountBlockCount,
            "account_get" => Self::AccountGet,
            "account_history" => Self::AccountHistory,
            "account_info" => Self::AccountInfo,
            "account_key" => Self::AccountKey,
            "account_representative" => Self::AccountRepresentative,
            "account_weight" => Self::AccountWeight,
            "accounts_balances" => Self::AccountsBalances,
            "accounts_frontiers" => Self::AccountsFrontiers,
            "accounts_pending" => Self::AccountsPending,
            "active_difficulty" => Self::ActiveDifficulty,
            "available_supply" => Self::AvailableSupply,
            "block_account" => Self::BlockAccount,
            "block_confirm" => Self::BlockConfirm,
            "block_count" => Self::BlockCount,
            "block_create" => Self::BlockCreate,
            "block_hash" => Self::BlockHash,
            "block_info" => Self::BlockInfo,
            "blocks" => Self::Blocks,
            "blocks_info" => Self::BlocksInfo,
            "bootstrap" => Self::Bootstrap,
            "bootstrap_any" => Self::BootstrapAny,
            "bootstrap_lazy" => Self::BootstrapLazy,
            "bootstrap_status" => Self::BootstrapStatus,
            "chain" => Self::Chain,
            "confirmation_active" => Self::ConfirmationActive,
            "confirmation_height_currently_processing" => Self::ConfirmationHeightCurrentlyProcessing,
            "confirmation_history" => Self::ConfirmationHistory,
            "confirmation_info" => Self::ConfirmationInfo,
            "confirmation_quorum" => Self::ConfirmationQuorum,
            "database_txn_tracker" => Self::DatabaseTxnTracker,
            "delegators" => Self::Delegators,
            "delegators_count" => Self::DelegatorsCount,
            "deterministic_key" => Self::DeterministicKey,
            "epoch_upgrade" => Self::EpochUpgrade,
            "frontier_count" => Self::FrontierCount,
            "frontiers" => Self::Frontiers,
            "keepalive" => Self::Kkeepalive,
            "key_create" => Self::KeyCreate,
            "key_expand" => Self::KeyExpand,
            "ledger" => Self::Ledger,
            "node_id" => Self::NodeId,
            "node_id_delete" => Self::NodeIdDelete,
            "peers" => Self::Peers,
            "pending" => Self::Pending,
            "pending_exists" => Self::PendingExists,
            "process" => Self::Process,
            "representatives" => Self::Representatives,
            "representatives_online" => Self::RepresentativesOnline,
            "republish" => Self::Republish,
            "sign" => Self::Sign,
            "stats" => Self::Stats,
            "stats_clear" => Self::StatsClear,
            "stop" => Self::Stop,
            "successors" => Self::Successors,
            "telemetry" => Self::Telemetry,
            "validate_account_number" => Self::ValidateAccountNumber,
            "version" => Self::Version,
            "unchecked" => Self::Unchecked,
            "unchecked_clear" => Self::UncheckedClear,
            "unchecked_get" => Self::UncheckedGet,
            "unchecked_keys" => Self::UncheckedKeys,
            "unopened" => Self::Unopened,
            "uptime" => Self::Uptime,
            "work_cancel" => Self::WorkCancel,
            "work_generate" => Self::WorkGenerate,
            "work_peer_add" => Self::WorkPeerAdd,
            "work_peers" => Self::WorkPeers,
            "work_peers_clear" => Self::WorkPeersClear,
            "work_validate" => Self::WorkValidate,
            _ => Self::NoAction,
        }
    }
}

impl Action {
    pub fn as_str(&self) -> String {
        match *self {
            Self::AccountBalance => "account_balance".to_string(),
            Self::AccountBlockCount => "account_block_count".to_string(),
            Self::AccountGet => "account_get".to_string(),
            Self::AccountHistory => "account_history".to_string(),
            Self::AccountInfo => "account_info".to_string(),
            Self::AccountKey => "account_key".to_string(),
            Self::AccountRepresentative => "account_representative".to_string(),
            Self::AccountWeight => "account_weight".to_string(),
            Self::AccountsBalances => "accounts_balances".to_string(),
            Self::AccountsFrontiers => "accounts_frontiers".to_string(),
            Self::AccountsPending => "accounts_pending".to_string(),
            Self::ActiveDifficulty => "active_difficulty".to_string(),
            Self::AvailableSupply => "available_supply".to_string(),
            Self::BlockAccount => "block_account".to_string(),
            Self::BlockConfirm => "block_confirm".to_string(),
            Self::BlockCount => "block_count".to_string(),
            Self::BlockCreate => "block_create".to_string(),
            Self::BlockHash => "block_hash".to_string(),
            Self::BlockInfo => "block_info".to_string(),
            Self::Blocks => "blocks".to_string(),
            Self::BlocksInfo => "blocks_info".to_string(),
            Self::Bootstrap => "bootstrap".to_string(),
            Self::BootstrapAny => "bootstrap_any".to_string(),
            Self::BootstrapLazy => "bootstrap_lazy".to_string(),
            Self::BootstrapStatus => "bootstrap_status".to_string(),
            Self::Chain => "chain".to_string(),
            Self::ConfirmationActive => "confirmation_active".to_string(),
            Self::ConfirmationHeightCurrentlyProcessing => "confirmation_height_currently_processing".to_string(),
            Self::ConfirmationHistory => "confirmation_history".to_string(),
            Self::ConfirmationInfo => "confirmation_info".to_string(),
            Self::ConfirmationQuorum => "confirmation_quorum".to_string(),
            Self::DatabaseTxnTracker => "database_txn_tracker".to_string(),
            Self::Delegators => "delegators".to_string(),
            Self::DelegatorsCount => "delegators_count".to_string(),
            Self::DeterministicKey => "deterministic_key".to_string(),
            Self::EpochUpgrade => "epoch_upgrade".to_string(),
            Self::FrontierCount => "frontier_count".to_string(),
            Self::Frontiers => "frontiers".to_string(),
            Self::Kkeepalive => "keepalive".to_string(),
            Self::KeyCreate => "key_create".to_string(),
            Self::KeyExpand => "key_expand".to_string(),
            Self::Ledger => "ledger".to_string(),
            Self::NodeId => "node_id".to_string(),
            Self::NodeIdDelete => "node_id_delete".to_string(),
            Self::Peers => "peers".to_string(),
            Self::Pending => "pending".to_string(),
            Self::PendingExists => "pending_exists".to_string(),
            Self::Process => "process".to_string(),
            Self::Representatives => "representatives".to_string(),
            Self::RepresentativesOnline => "representatives_online".to_string(),
            Self::Republish => "republish".to_string(),
            Self::Sign => "sign".to_string(),
            Self::Stats => "stats".to_string(),
            Self::StatsClear => "stats_clear".to_string(),
            Self::Stop => "stop".to_string(),
            Self::Successors => "successors".to_string(),
            Self::Telemetry => "telemetry".to_string(),
            Self::ValidateAccountNumber => "validate_account_number".to_string(),
            Self::Version => "version".to_string(),
            Self::Unchecked => "unchecked".to_string(),
            Self::UncheckedClear => "unchecked_clear".to_string(),
            Self::UncheckedGet => "unchecked_get".to_string(),
            Self::UncheckedKeys => "unchecked_keys".to_string(),
            Self::Unopened => "unopened".to_string(),
            Self::Uptime => "uptime".to_string(),
            Self::WorkCancel => "work_cancel".to_string(),
            Self::WorkGenerate => "work_generate".to_string(),
            Self::WorkPeerAdd => "work_peer_add".to_string(),
            Self::WorkPeers => "work_peers".to_string(),
            Self::WorkPeersClear => "work_peers_clear".to_string(),
            Self::WorkValidate => "work_validate".to_string(),
            Self::NoAction => "no_action".to_string(),
        }
    }
}